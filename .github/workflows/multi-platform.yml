name: Build and Publish Geode Mod

on:
  push:
    branches:
      - main 
      # don't fucking run it if i'm doing a casual commit


jobs:
  magic-touches:
    if: startsWith(github.event.head_commit.message, 'v')
    name: Apply magic touches
    runs-on: ubuntu-latest
  # outputs:
  #   mod_version: ${{ steps.get_version_input.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version_input
        run: |
        
          echo "VERSION_INPUT=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
          echo "value=$VERSION_INPUT" >> $GITHUB_OUTPUT
          echo version returned "$VERSION_INPUT".
          
      - name: Update changelog and bump version
        id: update_changelog
        run: |
          CHANGELOG=$(git log -1 --pretty=%B | sed '1d;$d') >> $GITHUB_ENV
          FORMATTED_VERSION="## <cy>$VERSION_INPUT</c>"
          echo -e "$FORMATTED_VERSION\n$CHANGELOG\n" >> changelog.md
          echo version: $VERSION_INPUT
          echo changelog:
          echo $CHANGELOG
          jq --arg new_version "${VERSION_INPUT#v}" '.version = $new_version' mod.json > tmp.json && mv tmp.json mod.json
          
      - name: Stage and commit changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add mod.json changelog.md  # Include any other modified files here
          git commit -m "Update version and changelog for release ${{ env.VERSION_INPUT }}" || echo "No changes to commit!?"
          
      - name: Push changes to repository
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build:
    needs: ['magic-touches']
    strategy:
      fail-fast: true
      matrix:
        config:
        - name: Windows
          os: windows-latest

        - name: macOS
          os: macos-latest

        - name: Android32
          os: ubuntu-latest
          target: Android32

        - name: Android64
          os: ubuntu-latest
          target: Android64

    name: Build (${{ matrix.config.name }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build the mod
        uses: geode-sdk/build-geode-mod@main
        with:
          bindings: geode-sdk/bindings
          bindings-ref: main
          combine: true
          target: ${{ matrix.config.target }}
        
  package:
    name: Package and release mod
    runs-on: ubuntu-latest
    needs: ['build', 'magic-touches']

    steps:
      - uses: geode-sdk/build-geode-mod/combine@main
        id: build
        name: Combine mods

      - uses: actions/upload-artifact@v4
        with:
          name: Build Output
          path: ${{ steps.build.outputs.build-output }}
         
      - uses: actions/download-artifact@v4
        name: Download artifact
      
      - name: Check for mod existence (failsafe)
        run: |
          cd "Build Output/"
          MOD_FILE=$(find . -name '*.geode' -print -quit)
          echo mod file path: $MOD_FILE
          if [ -f "$MOD_FILE" ]; then
             echo mod exists!!
          else
             echo "no mod file :("
             exit 1
          fi
      - name: Process Variables
        id: vars
        run: |
          MOD_VER=$(echo "${{ github.event.head_commit.message }}" | sed -n '1p') >> $GITHUB_ENV
          echo publishing mod ver: ${MOD_VER}
          REPO=${{ github.repository }}
          RELEASE_NAME="Release ${MOD_VER}"
          BODY="This is an automated release. For the changelogs, see the \`changelog.md\` file."

          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"tag_name\": \"$MOD_VER\", \"name\": \"$RELEASE_NAME\", \"body\": \"$BODY\", \"draft\": false, \"prerelease\": false}" \
             https://api.github.com/repos/$REPO/releases)

          upload_url=$(echo $response | jq -r '.upload_url' | sed -e "s/{?name,label}//")

          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "$upload_url?name=$(basename "$(find . -name '*.geode' -print -quit)")"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Delete mod file
        uses: geekyeggo/delete-artifact@v5
        with:
          name: Build Output
          failOnError: true
