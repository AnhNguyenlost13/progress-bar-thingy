name: Build Geode Mod (Plus)

on:
  push:
    branches:
      - main 
      # don't fucking run it if i'm doing a casual commit

jobs:
  magic-touches:
    if: contains(github.event.head_commit.message, '[build]') == true
    name: Apply magic touches
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        id: get_branch_name
        run: |
          echo "SOURCE_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo branch name: ${GITHUB_REF#refs/heads/}
        
        
      - name: Update changelog and bump version
        id: update_changelog
        run: |
          CHANGELOG=$(git log -1 --pretty=format:'%s')
          VERSION="## <cy>$SOURCE_BRANCH</c>"
          echo -e "\n$VERSION\n$CHANGELOG\n" >> changelog.md
          echo version: $VERSION
          echo changelog: $CHANGELOG

          jq --arg new_version "$SOURCE_BRANCH" '.version = $new_version' mod.json > tmp.json && mv tmp.json mod.json
          
  commit:
    name: Commit changes
    runs-on: ubuntu-latest
    needs: ['magic-touches']
    steps:
      - name: Stage and commit changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add mod.json changelog.md  # Include any other modified files here
          git commit -m "Update version and changelog for release ${{ env.SOURCE_BRANCH }}" || echo "No changes to commit!?"
          
      - name: Push changes to repository
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build:
    needs: ['commit']
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest

        - name: macOS
          os: macos-latest

        - name: Android32
          os: ubuntu-latest
          target: Android32

        - name: Android64
          os: ubuntu-latest
          target: Android64

    name: Build (${{ matrix.config.name }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Build the mod
        uses: geode-sdk/build-geode-mod@main
        with:
          bindings: geode-sdk/bindings
          bindings-ref: main
          combine: true
          target: ${{ matrix.config.target }}
        
  package:
    name: Package builds
    runs-on: ubuntu-latest
    needs: ['build']

    steps:
      - uses: geode-sdk/build-geode-mod/combine@main
        id: build

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: Build Output
    #     path: ${{ steps.build.outputs.build-output }}
      - name: Unpack build (real)
        run: |
          unzip "${{ steps.build.outputs.build-output }}"
          
  release:
    name: Release mod
    needs: ['package']
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.SOURCE_BRANCH }}
          release_name: "Release ${{ env.SOURCE_BRANCH }}"
          body: ${{ steps.update-changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .geode file to release
        run: |
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          RELEASE_ID="${{ steps.create_release.outputs.id }}"
          MOD_FILE=$(find . -name '*.geode' -print -quit)
          if [ -f "$MOD_FILE" ]; then
            echo "Uploading $MOD_FILE to release..."
            curl -s -X POST "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(basename "$MOD_FILE")" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$MOD_FILE"
          else
            echo "wtf where's the geode file lol"
          fi
        
