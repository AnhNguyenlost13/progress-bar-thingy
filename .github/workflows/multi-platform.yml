name: Build Geode Mod (dude)

on:
  push:
    branches:
      - main 
      # don't fucking run it if i'm doing a casual commit


jobs:
  magic-touches:
    if: startsWith(github.event.head_commit.message, 'v')
    name: Apply magic touches
    runs-on: ubuntu-latest
    outputs:
      mod_version: ${{ steps.get_branch_name.outputs.value }}
      changelog: ${{ steps.set_changelog.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_branch_name
        run: |
          echo "SOURCE_BRANCH=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
          echo "value=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
        
      - name: Set changelog
        id: set_changelog
        run: |
          CHANGELOG=$(git log -1 --pretty=%B | sed '1d;$d') >> $GITHUB_ENV
          # sanitize new lines jic
          CHANGELOG=${CHANGELOG//$'\n'/ }
          echo "value=$CHANGELOG" >> $GITHUB_OUTPUT
          
      - name: Update changelog and bump version
        id: update_changelog
        run: |
          FORMATTED_VERSION="## <cy>$SOURCE_BRANCH</c>"
          echo -e "$FORMATTED_VERSION\n$CHANGELOG\n" >> changelog.md
          echo version: $SOURCE_BRANCH
          echo changelog: $CHANGELOG

          jq --arg new_version "${SOURCE_BRANCH#v}" '.version = $new_version' mod.json > tmp.json && mv tmp.json mod.json
          
      - name: Stage and commit changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add mod.json changelog.md  # Include any other modified files here
          git commit -m "Update version and changelog for release ${{ env.SOURCE_BRANCH }}" || echo "No changes to commit!?"
          
      - name: Push changes to repository
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build:
    needs: ['magic-touches']
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest

        - name: macOS
          os: macos-latest

        - name: Android32
          os: ubuntu-latest
          target: Android32

        - name: Android64
          os: ubuntu-latest
          target: Android64

    name: Build (${{ matrix.config.name }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build the mod
        uses: geode-sdk/build-geode-mod@main
        with:
          bindings: geode-sdk/bindings
          bindings-ref: main
          combine: true
          target: ${{ matrix.config.target }}
        
  package:
    name: Package and release mod
    runs-on: ubuntu-latest
    needs: ['build', 'magic-touches']

    steps:
      - uses: geode-sdk/build-geode-mod/combine@main
        id: build

      - uses: actions/upload-artifact@v4
        with:
         name: Build Output
         path: ${{ steps.build.outputs.build-output }}

      - uses: actions/download-artifact@v4
      - name: Unpack build (real)
        run: |
          cd "Build Output"
      - name: Check for mod existence (failsafe)
        run: |
          MOD_FILE=$(find . -name '*.geode' -print -quit) >> $GITHUB_ENV
          echo mod file: $MOD_FILE
          if [ -f "$MOD_FILE" ]; then
             echo success
          else
             echo "no mod file :("
             exit 1
          fi
      - name: Workarounds
        run: |
          echo "SOURCE_BRANCH=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
          
          
      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.magic-touch.outputs.mod_version }}
          name: "Release ${{ needs.magic-touches.outputs.mod_version }}"
          body: ${{ needs.magic-touches.outputs.changelog }}
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          files: |
            ${{ env.MOD_FILE }}
            $MOD_FILE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Delete mod file
        uses: geekyeggo/delete-artifact@v5
        with:
          name: Build Output
          failOnError: true
